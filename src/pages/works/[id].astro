---
import {
  workIdFetcher,
  worksNextPrevFetcher,
  worksPageContentFetcher,
} from "@/api";
import Layout from "@/layouts/Layout.astro";
import {
  dateConverter,
  idAbleToStaticPathConverter,
  months,
  nextPrevIDMaker,
} from "@/utils";
import { render } from "datocms-structured-text-to-html-string";
import ActionButton from "@/components/ActionButton.svelte";
import Spacer from "@/components/Spacer.astro";

const workIDs = await workIdFetcher();

export async function getStaticPaths() {
  return idAbleToStaticPathConverter(await workIdFetcher());
}

const { id } = Astro.params;

const { nextID, prevID } = nextPrevIDMaker(
  id ?? "",
  workIDs.map(({ id }) => id)
);

const {
  companyName: nextCompanyName,
  role: nextRole,
  gradientEndColor: nextGradientEndColor,
  gradientStartColor: nextGradientStartColor,
} = await worksNextPrevFetcher(nextID);

const {
  companyName: prevCompanyName,
  role: prevRole,
  gradientEndColor: prevGradientEndColor,
  gradientStartColor: prevGradientStartColor,
} = await worksNextPrevFetcher(prevID);

const {
  description,
  galleryPhotos,
  galleryTitle,
  gradientEndColor,
  gradientStartColor,
  projectLink,
  companyName,
  ongoing,
  role,
  shortRemark,
  workStartDate,
  workEndDate,
  repositoryLink,
  techStack,
} = await worksPageContentFetcher(id ?? "");

// const projectIndexFromFetchedData = allProjects.findIndex(
//   ({ id: projectId }) => projectId === id
// );

// const b = allProjects[projectIndexFromFetchedData];

// const nextProjectIndex = (projectIndexFromFetchedData + 1) % allProjects.length;
// const prevProjectIndex =
//   projectIndexFromFetchedData - 1 < 0
//     ? allProjects.length - 1
//     : projectIndexFromFetchedData - 1;

// const {
//   projectName: nextProjectName,
//   gradientEndColor: nextProjectGradientEndColor,
//   gradientStartColor: nextProjectGradientStartColor,
// } = allProjects[nextProjectIndex];

// const {
//   projectName: prevProjectName,
//   gradientEndColor: prevProjectGradientEndColor,
//   gradientStartColor: prevProjectGradientStartColor,
// } = allProjects[prevProjectIndex];

const { month: startMonth, year: startYear } = dateConverter(workStartDate);
const { month: endMonth, year: endYear } = workEndDate
  ? dateConverter(workEndDate)
  : { month: 0, year: 0 };
---

<Layout
  title={`${role} - ${companyName}`}
  pageDescription={`Fatih NRI experience working as ${role} at ${companyName}. ${shortRemark}`}
  activeNavigationOption={""}
>
  <div
    class="flex flex-col items-center justify-start w-full px-horizontalPaddingMobile lg:px-horizontalPaddingDesktop flex-grow text-silver-100"
  >
    <main
      class="flex flex-col items-center justify-start w-full max-w-2xl mx-auto flex-grow pb-4 border-b-2"
      style={`
      border-color: ${gradientEndColor};
  `}
    >
      <header
        class="flex flex-col items-start justify-start gap-2 w-full px-4 pb-2"
        style={`
          border-color: ${gradientStartColor};
          --tw-shadow-color: ${gradientEndColor}7F;
          --tw-shadow: var(--tw-shadow-colored);
      `}
      >
        <div class="flex flex-col items-start justify-start w-full">
          <h1 class="text-4xl lg:text-5xl text-left font-black">
            {role}
          </h1>
          <h2 class="text-2xl text-left font-bold">
            {companyName}
          </h2>
          <div class="flex flex-col items-start justify-start w- mt-1">
            <p class="text-lg text-left text-silver-500">
              {shortRemark}
            </p>
            <div class="flex justify-start items-center gap-2 text-silver-500">
              <i class="fa-regular fa-calendar-days"></i>
              <p class="text-base font-medium text-left">
                {months[startMonth - 1]}
                {startYear}
                {workEndDate ? `- ${months[endMonth - 1]} ${endYear}` : null}
              </p>
            </div>
          </div>
        </div>
      </header>
      <div
        class="w-full border-y-[1px] py-2"
        style={`
        border-color: ${gradientEndColor};
    `}
      >
        <ActionButton client:visible stackContent={techStack}>
          <a
            href={repositoryLink}
            class="right-sidebar-button flex-grow"
            slot="side-button"
            target="_blank"
          >
            Visit the Repo
          </a>
          <a
            href={projectLink}
            class="right-sidebar-button flex-grow"
            slot="side-button"
            target="_blank"
          >
            Try the Project
          </a>
        </ActionButton>
      </div>
      <section
        class="summary-container flex flex-col items-start justify-start w-full rounded-lg px-4 pb-4"
        style={`
        border-color: ${gradientEndColor};
    `}
      >
        <Fragment set:html={render(description)} />
      </section>

      <Spacer />
      <div
        class="flex flex-col lg:flex-row w-full text-silver-100 h-fit justify-items-stretch gap-2 lg:gap-4 text-xl"
      >
        <a
          href={`/works/${prevID}`}
          class="group next-prev bg-gradient-to-r justify-start"
          style={`
            --tw-gradient-from: ${prevGradientStartColor};
            --tw-gradient-to: ${prevGradientEndColor};
            --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
            --tw-shadow-color: ${prevGradientStartColor};
            --tw-shadow: var(--tw-shadow-colored);
        `}
        >
          <i class="fa-solid fa-arrow-left text-xl group-hover:-translate-x-1"
          ></i>
          <div class="flex flex-col">
            <p>
              {prevCompanyName}
            </p>
            <p class="text-sm">
              {prevRole}
            </p>
          </div>
        </a>
        <Spacer />
        <a
          href={`/works/${nextID}`}
          class="group next-prev bg-gradient-to-l justify-end"
          style={`
            --tw-gradient-from: ${nextGradientStartColor};
            --tw-gradient-to: ${nextGradientEndColor};
            --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
            --tw-shadow-color: ${nextGradientStartColor};
            --tw-shadow: var(--tw-shadow-colored);
        `}
        >
          <div class="flex flex-col">
            <p>
              {nextCompanyName}
            </p>
            <p class="text-sm">
              {nextRole}
            </p>
          </div>
          <i class="fa-solid fa-arrow-right text-xl group-hover:translate-x-1"
          ></i>
        </a>
      </div>
    </main>
  </div>
</Layout>
